name: 'Manuel Build Y√ºkle ve Release Olu≈ütur'

on:
  push:
    branches:
      - release
  workflow_dispatch:  # Manuel tetikleme se√ßeneƒüi

# Bu workflow elle derlenmi≈ü dosyalarƒ± build-artifacts klas√∂r√ºnden alƒ±r ve GitHub Releases'e ekler

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result.id }}
      release_upload_url: ${{ steps.create-release.outputs.result.upload_url }}
      app_version: ${{ steps.app-version.outputs.version }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Get App Version
        id: app-version
        run: |
          VERSION=$(grep '"version":' ./package.json | head -1 | awk -F: '{ print $2 }' | sed 's/[", ]//g')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Versiyon: $VERSION"
      
      - name: Create Release
        id: create-release
        uses: actions/github-script@v7
        env:
          VERSION: ${{ steps.app-version.outputs.version }}
        with:
          result-encoding: string
          script: |
            const version = process.env.VERSION;
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${version}`,
              name: `üöÄ AnyAssist v${version}`,
              body: [
                `## üéâ AnyAssist S√ºr√ºm ${version}`,
                '',
                '### ‚ú® Yenilikler',
                '- Bu s√ºr√ºm√ºn yeniliklerini buraya ekleyin',
                '',
                '### üêõ Hata D√ºzeltmeleri',
                '- D√ºzeltilen hatalarƒ± buraya ekleyin',
                '',
                '### üì¶ ƒ∞ndirme Baƒülantƒ±larƒ±',
                '- Windows, macOS ve Linux i√ßin kurulum dosyalarƒ± a≈üaƒüƒ±da bulunmaktadƒ±r.',
                '',
                '---',
                '*Bu g√ºncelleme otomatik olarak uygulamaya bildirilecektir.*'
              ].join('\n'),
              draft: true,
              prerelease: false
            });
            return { id: data.id, upload_url: data.upload_url };

  # Build artifacts'leri y√ºkle
  upload-artifacts:
    needs: create-release
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Find Build Artifacts
        id: find-artifacts
        run: |
          echo "Windows Artifacts:"
          find build-artifacts -name "*.exe" -o -name "*.msi" | tee windows_artifacts.txt
          
          # T√ºm dosyalarƒ± bir listeye ekle
          find build-artifacts -type f | grep -v "latest.json" > all_artifacts.txt
          
          # Dosya sayƒ±sƒ±nƒ± g√∂ster
          COUNT=$(wc -l < all_artifacts.txt)
          echo "Toplam $COUNT build artifact bulundu."
          
          if [ "$COUNT" -eq "0" ]; then
            echo "UYARI: Dosya bulunamadƒ±! 'build-artifacts' klas√∂r√ºnde kurulum dosyalarƒ± bulunamadƒ±."
            echo "artifacts_found=false" >> $GITHUB_OUTPUT
          else
            echo "artifacts_found=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Upload Build Artifacts
        if: steps.find-artifacts.outputs.artifacts_found == 'true'
        run: |
          # Debug i√ßin URL bilgisini yazdƒ±r
          echo "Orijinal Upload URL: ${{ needs.create-release.outputs.release_upload_url }}"
          
          # URL'deki {?name,label} b√∂l√ºm√ºn√º temizle
          UPLOAD_URL="${{ needs.create-release.outputs.release_upload_url }}"
          CLEAN_URL=${UPLOAD_URL%\{*\}}
          echo "Temizlenmi≈ü URL: $CLEAN_URL"
          
          while IFS= read -r artifact_path; do
            filename=$(basename "$artifact_path")
            echo "Y√ºkle: $filename"
            
            curl \
              -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary "@$artifact_path" \
              "${CLEAN_URL}?name=$filename"
              
            echo "Y√ºklendi: $filename"
          done < all_artifacts.txt
      
      - name: Create latest.json
        id: create-latest-json
        run: |
          VERSION="${{ needs.create-release.outputs.app_version }}"
          REPO_OWNER="${{ github.repository_owner }}"
          REPO_NAME="${{ github.event.repository.name }}"
          
          # Windows imzasƒ±nƒ± varsayƒ±lan olarak ayarla
          WINDOWS_SIGNATURE=""
          WINDOWS_URL=""
          if [ -f "build-artifacts/windows-signature.txt" ]; then
            WINDOWS_SIGNATURE=$(cat "build-artifacts/windows-signature.txt")
          fi
          
          # Windows installer URL'sini ayarla
          WINDOWS_INSTALLER=$(find build-artifacts -name "*_x64-setup.exe" -o -name "*_setup.exe" -o -name "*.exe" | head -1)
          if [ -n "$WINDOWS_INSTALLER" ]; then
            INSTALLER_FILENAME=$(basename "$WINDOWS_INSTALLER")
            WINDOWS_URL="https://github.com/$REPO_OWNER/$REPO_NAME/releases/download/v$VERSION/$INSTALLER_FILENAME"
          fi
          
          # latest.json dosyasƒ±nƒ± olu≈ütur
          cat > latest.json << EOF
          {
            "version": "$VERSION",
            "notes": "AnyAssist S√ºr√ºm $VERSION - G√ºncelleme notlarƒ± i√ßin GitHub Releases sayfasƒ±nƒ± ziyaret edin.",
            "pub_date": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "platforms": {
              "windows-x86_64": {
                "signature": "$WINDOWS_SIGNATURE",
                "url": "$WINDOWS_URL"
              }
            }
          }
          EOF
          
          # Sadece Windows destekleniyor
          
          echo "latest.json olu≈üturuldu:"
          cat latest.json
          
      - name: Upload latest.json to Release
        run: |
          # URL'deki {?name,label} b√∂l√ºm√ºn√º temizle
          UPLOAD_URL="${{ needs.create-release.outputs.release_upload_url }}"
          CLEAN_URL=${UPLOAD_URL%\{*\}}
          
          curl \
            -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data-binary "@latest.json" \
            "${CLEAN_URL}?name=latest.json"
            
      # OTA repo i√ßin g√ºncelleme
      - name: Copy to AnyAssist-OTA Repo
        if: github.ref == 'refs/heads/release'
        run: |
          # OTA deposunu klonla
          git clone https://github.com/${{ github.repository_owner }}/AnyAssist-OTA.git ota-repo
          
          # S√ºr√ºm tag'ini olu≈ütur
          VERSION="${{ needs.create-release.outputs.app_version }}"
          cd ota-repo
          
          # Token ile baƒülan
          git remote set-url origin https://x-access-token:${{ secrets.REPO_TOKEN }}@github.com/${{ github.repository_owner }}/AnyAssist-OTA.git
          
          # Son durumu √ßek
          git pull origin main
          
          # latest.json dosyasƒ±nƒ± kopyala
          cp ../latest.json .
          
          # Deƒüi≈üiklikleri commit'le
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add latest.json
          git commit -m "Update latest.json to v$VERSION"
          
          # Tag olu≈ütur
          git tag -a "v$VERSION" -m "Release v$VERSION"
          
          # Push yap
          git push origin main
          git push origin "v$VERSION"
        continue-on-error: true  # OTA repo yoksa hata vermesin