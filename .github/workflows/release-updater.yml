name: "AnyAssist - Çoklu Platform Yayınlama ve Güncelleme Sistemi"

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
      release_upload_url: ${{ steps.create-release.outputs.upload_url }}
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          
      - name: Get Version
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Create Release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: 'AnyAssist-OTA',
              tag_name: `v${process.env.VERSION}`,
              name: `🚀 AnyAssist v${process.env.VERSION}`,
              body: [
                `## 🎉 AnyAssist Sürüm ${process.env.VERSION}`,
                '',
                '### ✨ Yenilikler',
                '- Bu sürümün yeniliklerini buraya ekleyin',
                '',
                '### 🐛 Hata Düzeltmeleri',
                '- Düzeltilen hataları buraya ekleyin',
                '',
                '### 📦 İndirme Bağlantıları',
                '- Windows, macOS ve Linux için kurulum dosyaları aşağıda bulunmaktadır.',
                '',
                '### 💾 Gürsel değişiklikler',
                '- Arayüz iyileştirmeleri ve diğer gürsel değişiklikleri buraya ekleyin',
                '',
                '---',
                '*Bu güncelleme otomatik olarak uygulamaya bildirilecektir.*'
              ].join('\n'),
              draft: false,
              prerelease: false
            })
            return { upload_url: data.upload_url, id: data.id }
        env:
          VERSION: ${{ steps.get_version.outputs.version }}

  build-updater:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows
          - target: x86_64-pc-windows-msvc
            platform: windows-x86_64
            os: windows-latest
            installer_ext: exe
            asset_content_type: application/vnd.microsoft.portable-executable
            installer_name: "x64-setup.exe"
            os_name: "Windows"
            icon: "🔧"
            
          # macOS
          - target: aarch64-apple-darwin
            platform: darwin-aarch64
            os: macos-latest
            installer_ext: dmg
            asset_content_type: application/x-apple-diskimage
            installer_name: "_aarch64.dmg"
            os_name: "macOS (Apple Silicon)"
            icon: "🍏"
            
          - target: x86_64-apple-darwin
            platform: darwin-x86_64
            os: macos-latest
            installer_ext: dmg
            asset_content_type: application/x-apple-diskimage
            installer_name: "_x64.dmg"
            os_name: "macOS (Intel)"
            icon: "🍏"
            
          # Linux
          - target: x86_64-unknown-linux-gnu
            platform: linux-x86_64
            os: ubuntu-20.04
            installer_ext: AppImage
            asset_content_type: application/octet-stream
            installer_name: "_amd64.AppImage"
            os_name: "Linux"
            icon: "🗋"
            
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          repository: iphysicc/AnyAssist
          
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest
          
      - uses: tauri-apps/tauri-action@v0
        id: tauri_build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          args: --target ${{ matrix.target }}
          
      # Tauri 2.0 kendi imzalama mekanizmasını kullanıyor, Minisign kurulumuna gerek yok
          
      - name: Get Version
        id: get_version
        shell: bash
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Get Signature from Build Output
        id: get_signature
        shell: bash
        run: |
          # Tauri action zaten imzalamayı otomatik olarak yapar
          # steps.tauri_build.outputs.signature outputunu kullanıyoruz
          SIGNATURE="${{ steps.tauri_build.outputs.signature }}"
          if [ -z "$SIGNATURE" ]; then
            echo "UYARI: İmza bulunamadı, varsayılan olarak 'Imzasiz' kullanılıyor"
            SIGNATURE="Imzasiz"
          fi
          echo "signature=$SIGNATURE" >> $GITHUB_OUTPUT
          
      - name: Create Platform JSON
        id: create_platform_json
        shell: bash
        run: |
          cat > platform-${{ matrix.platform }}.json << EOF
          {
            "signature": "${{ steps.get_signature.outputs.signature }}",
            "url": "https://github.com/iphysicc/AnyAssist-OTA/releases/download/v${{ steps.get_version.outputs.version }}/AnyAssist_${{ steps.get_version.outputs.version }}${{ matrix.installer_name }}"
          }
          EOF
      
      # Bu adım platform-specific json dosyasını oluşturur
      - name: Create latest.json For Combined Upload
        if: matrix.platform == 'windows-x86_64'
        id: create_latest_json
        shell: bash
        run: |
          # Bu bir şablon. Diğer platformların verileri başka bir adımda eklenecek
          cat > latest.json << EOF
          {
            "version": "${{ steps.get_version.outputs.version }}",
            "notes": "AnyAssist Sürüm ${{ steps.get_version.outputs.version }} - Tam sürüm notları için GitHub Releases sayfasını ziyaret edin.",
            "pub_date": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "platforms": {
              "windows-x86_64": {
                "signature": "${{ steps.get_signature.outputs.signature }}",
                "url": "https://github.com/iphysicc/AnyAssist-OTA/releases/download/v${{ steps.get_version.outputs.version }}/AnyAssist_${{ steps.get_version.outputs.version }}${{ matrix.installer_name }}"
              }
            }
          }
          EOF
          
      - name: Upload Installer to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.release_upload_url }}
          asset_path: ${{ steps.tauri_build.outputs.installerPath }}
          asset_name: AnyAssist_${{ steps.get_version.outputs.version }}${{ matrix.installer_name }}
          asset_content_type: ${{ matrix.asset_content_type }}
          
      - name: Upload Platform JSON
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.release_upload_url }}
          asset_path: platform-${{ matrix.platform }}.json
          asset_name: platform-${{ matrix.platform }}.json
          asset_content_type: application/json
          
      - name: Upload latest.json to Release (Windows Only)
        if: matrix.platform == 'windows-x86_64'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.release_upload_url }}
          asset_path: latest.json
          asset_name: latest.json
          asset_content_type: application/json
          
  # Tüm platformlar için combined latest.json oluşturma (son job olarak çalışır)
  combine-json:
    needs: [create-release, build-updater]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          
      - name: Get Version
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Download Platform JSON Files
        uses: actions/github-script@v7
        id: download-platform-jsons
        with:
          script: |
            const fs = require('fs');
            const platforms = [
              "windows-x86_64", 
              "darwin-aarch64", 
              "darwin-x86_64", 
              "linux-x86_64"
            ];
            
            async function downloadAsset(assetName) {
              const release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: 'AnyAssist-OTA',
                tag: `v${process.env.VERSION}`
              });
              
              const asset = release.data.assets.find(a => a.name === assetName);
              if (!asset) {
                console.log(`Asset ${assetName} not found!`);
                return null;
              }
              
              const download = await github.rest.repos.getReleaseAsset({
                owner: context.repo.owner,
                repo: 'AnyAssist-OTA',
                asset_id: asset.id,
                headers: { accept: 'application/octet-stream' }
              });
              
              if (download.data) {
                fs.writeFileSync(assetName, Buffer.from(download.data));
                return JSON.parse(fs.readFileSync(assetName, 'utf8'));
              }
              
              return null;
            }
            
            const platformsData = {};
            const missingPlatforms = [];
            
            for (const platform of platforms) {
              const jsonFile = `platform-${platform}.json`;
              const data = await downloadAsset(jsonFile);
              
              if (data) {
                platformsData[platform] = data;
              } else {
                missingPlatforms.push(platform);
              }
            }
            
            // Birleştirilmiş JSON oluştur
            const combinedJson = {
              version: process.env.VERSION,
              notes: `AnyAssist Sürüm ${process.env.VERSION} - Tam sürüm notları için GitHub Releases sayfasını ziyaret edin.`,
              pub_date: new Date().toISOString(),
              platforms: platformsData
            };
            
            fs.writeFileSync('combined-latest.json', JSON.stringify(combinedJson, null, 2));
            
            if (missingPlatforms.length > 0) {
              console.log(`Warning: Missing platform data for: ${missingPlatforms.join(', ')}`);
            }
        env:
          VERSION: ${{ steps.get_version.outputs.version }}
          
      - name: Upload Combined latest.json
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.release_upload_url }}
          asset_path: combined-latest.json
          asset_name: latest-all.json
          asset_content_type: application/json
